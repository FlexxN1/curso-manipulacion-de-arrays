const numbers = [1,30,49,29,10,13];

let rta = undefined;

for (let index = 0; index < numbers.length; index++) {
    const element = numbers[index];
    if(element === 30){
        rta = element;
        break;
    }
}

console.log("For", rta)

//con Find
const rta2 = numbers.find(item => item === 30)
console.log("Find", rta2);


//Ejercicio
const products = [
  {
    name: "Pizza",
    price: 12,
    id: 'üçï'
  },
  {
    name: "Burger",
    price: 23,
    id: 'üçî'
  },
  {
    name: "Hot dog",
    price: 34,
    id: 'üå≠'
  },
  {
    name: "Hot cakes",
    price: 355,
    id: 'ü•û'
  },
];

const rta3 = products.find(item => item.id === 'üçî')
console.log('find', rta3);
const rta4 = products.findIndex(item => item.id === 'üçî')
console.log('findIndex', rta4);

/* 
Los m√©todos find y findIndex consisten en encontrar el primer elemento de un array que cumpla con la condici√≥n especificada en la funci√≥n (callback).

En el caso de find retornar√° el elemento completo, si cumple con la condici√≥n, caso contrario retornar√° undefined. El m√©todo findIndex retornar√° el √≠ndice del elemento encontrado, caso contrario retornar√° -1.

Estos procedimientos reciben dos argumentos:

La funci√≥n que itera y eval√∫a cada elemento del array hasta encuentre uno que cumpla con la condici√≥n especificada (obligatorio).
Un objeto al que puede hacer referencia el contexto this en la funci√≥n. Si se lo omite, ser√° undefined. Recuerde que this en arrow functions es el objeto global.
array.find(function(), thisArg)
array.findIndex(function(), thisArg)
La funci√≥n, que recibe como argumento los m√©todos find y findIndex, utiliza tres par√°metros:

El valor actual del elemento iterado. Es decir, si es la primera iteraci√≥n, ser√° el primer elemento, y as√≠ sucesivamente.
El √≠ndice del elemento iterado. Es decir, si es la primera iteraci√≥n, ser√° el √≠ndice 0, y as√≠ sucesivamente.
El array que est√° iterando.
array.find(function(element, index, array))
array.findIndex(function(element, index, array))
Diferencia entre la estructura for y los m√©todos find y findIndex
Los m√©todos de arrays nos permiten realizar algoritmos con una menor cantidad de l√≠neas que una estructura for, con un resultado igual o parecido.

Por ejemplo, hagamos un algoritmo que devuelva el primer elemento que sea mayor a 40 de un array.

Si utilizamos la estructura for, necesitaremos una variable con el valor undefined e iterar hasta que se cumpla la condici√≥n. La palabra reservada break rompe el ciclo repetitivo.

const numbers = [1, 30, 41, 29, 50, 60]

let respuesta = undefined
for (let i=0; i < numbers.length; i++){
    const element = numbers[i]
    if (element >= 40) {
        respuesta = element
        break
    }
}

console.log(respuesta) // 41
Si se necesita el √≠ndice, en lugar de una variable con el valor de undefined, deber√≠a estar un valor de -1. Y tambi√©n cambiar el valor del elemento por el del √≠ndice del for.

Con los m√©todos find y findIndex, solo debemos establecer la funci√≥n que indique la condici√≥n a cumplir para cada elemento.

const numbers = [1, 30, 41, 29, 50, 60]

const respuesta = numbers.find(item => item >= 40)
const respuesta2 = numbers.findIndex(item => item >= 40)

console.log(respuesta) // 41
console.log(respuesta2) // 2
Recuerda que si los m√©todos find y findIndex no encuentran EL elemento, devolver√°n undefined y -1, respectivamente.

const numbers = ["a", "b", "c"]

const respuesta = numbers.find(item => item >= 40)
const respuesta2 = numbers.findIndex(item => item >= 40)

console.log(respuesta) // undefined
console.log(respuesta2) // -1
*/